name: CI

on:
  push:
    branches:
      - main
      - develop
      - release/**
      - hotfix/**
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - main
      - develop
      - release/**
      - hotfix/**

jobs:

  ##############################
  # 🏷️ FETCH & ANALYSIS STAGE #
  ##############################

  checkout-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🧩 Static Code Analysis (Linting)
        run: |
          echo "Run linter (e.g., eslint, flake8, etc.)"

      - name: 🧩 Dependency & Vulnerability Scanning
        run: |
          echo "Run dependency scan (e.g., npm audit, pip-audit, snyk, etc.)"


  ##############################
  # ⚙️ TESTING STAGE (Docker)  #
  ##############################

  docker-build-test:
    needs: checkout-and-analyze
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: 🐳 Docker Build with Cache (with Tests in Build Stages)
        run: |
          TAG=ci-${GITHUB_SHA::7}
          echo "TAG=$TAG" >> $GITHUB_ENV
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t your-org/your-app:$TAG .

      - name: 💾 Save Docker image tag
        id: meta
        run: |
          echo "tag=ci-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT


  ##############################
  # 📦 BUILD & SECURITY STAGE  #
  ##############################

  build-and-verify:
    needs: docker-build-test
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.docker-build-test.outputs.image-tag }}
    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 📤 Extract Coverage for CI Tools
        run: |
          echo "Copy coverage files to known CI location"

      - name: 📊 SonarQube Analysis / Quality Gate
        run: |
          echo "Trigger SonarQube scan"

      - name: 🛠️ Set up Docker Buildx (for image scan)
        uses: docker/setup-buildx-action@v2

      - name: 🔍 Image Scan
        run: |
          echo "Scan built Docker image for vulnerabilities"
          docker scout cves <your base image e.g node:18-alpine>
          docker scout cves your-org/your-app:$TAG

      - name: 📦 Artifact Archiving & Repo Publishing
        if: >
          github.event_name == 'push' ||
          (
            github.event_name == 'pull_request' &&
            (
                startsWith(github.base_ref, 'release/') ||
                startsWith(github.base_ref, 'hotfix/') ||
                github.base_ref == 'develop' ||
                github.base_ref == 'main'
            )
          )
        run: |
          echo "Push artifact/image to staging registry"
          docker push your-org/your-app:$TAG

      - name: 📝 Write image tag to file
        run: |
          echo "$TAG" > image_tag.txt

      - name: 📤 Upload image tag for downstream workflows
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image_tag.txt

      - name: 📋 Upload Summary
        run: |
          echo "### Docker Image Tag Used" >> $GITHUB_STEP_SUMMARY
          echo "\`${TAG}\`" >> $GITHUB_STEP_SUMMARY